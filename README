To set up the development server
=================================

  0. Assure you have an up to date Python version installed
  1. Install Django
       link:  
             https://www.djangoproject.com/download/
       commands:
             cd <your/download/location>
             python setup.py install
  2. Install django-registration 
       link:  
             https://bitbucket.org/ubernostrum/django-registration/downloads
       command:
             cd <your/download/location>
             python setup.py install
  3. Install django-mptt
       link:  
             https://github.com/django-mptt/django-mptt/  
       command:
             cd <your/download/location>
             python setup.py install
  4. Install textile
       link:
             http://pypi.python.org/pypi/textile
       command:
             cd <your/download/location>
             python setup.py install
       Note:
       		You might need to install setuptools at this step, which can be 
       		found at http://pypi.python.org/pypi/setuptools#files, and you'll
       		need to download the tar.gz file
  5. Setup your database (either postgresql, sqlite3, mysql, etc...)
       * Install
       * Start the server
       * add database
       * NOTE: On Macs, sqlite3 is probably installed by default and is a good choice
  6. Change settings.py
     * first copy the settings template file to settings.py with this command:
          $ cp settings.py.template settings.py
	   * Change PREFIX. Remember to put a '/' after your path, like this:
	     '/Users/YZ/Sites/Chameleon_Reader/'.
	   * Change USER to your user name.
	   * Change DATABASES setting (optional). 
          ->  It is recommended to use 'sqlite3' because:
                - It's installed by default on most operating systems
                - it's very automatic to set up
	   * Change TIME_ZONE to 'America/Vancouver'.  This is not required though.
  7. Initialize database
  	   * Command: python manage.py syncdb.
       * At this point, you should create a super user when prompted,
         this will be the username / password used to login to the admin interface
  8. Run server
  	   * Command: python manage.py runserver
  9. Visit http://localhost:8000 in your browser
       * Note: you can log into the admin interface by visiting:
               http://localhost:8000/admin

Project File Structure
======================
The project settings are located in the root-level settings.py file.  That file contains
the list of software modules in the INSTALLED_APPS setting.  These are the major modules:

- Contents
- GameProfile
- Registration
- Notes* 

*The Notes module was dumped in Project 2.

These modules correspond to directories in the Project:

- contents/
- gameprofile/
- registration/
- notes/

Each of these modules is a "Django App" that contains a subset of these files:

- urls.pyt
    * This file holds the URLs associated with the module.
- models.py
    * holds the objects and methods for the module.
- views.pyt
    * directs the user through the URL landscape of the project, interacting 
      with the database when needed and selecting the appropriate UI attributes.
- forms.py 
    * an optional file that contains forms for defining module object via user input.
- fixtures/
    * This directory holds the database backup information (see the next section for
      more information).

settings.py also defines how media objects (images, CSS, and javascript files) are servered.  
Static files are stored in the root-level static/ directory, organized as follows:

- static/img   :    where images are stored
- static/js    :    where javascript files are stored
- static/css   :    where CSS files for styling are stored



Save changes made to the database
==================================
Problem
-------
When you make changes to the database, e.g. through the admin interface, the 
changes will not be automatically propagated to other remote databases.  In our
configuration, each server is using a local database, and this database file is
not managed by Git.  That's why your changes is only available on your server.

Solution
--------
You can dump your database content to a file.  Since the file is managed by Git,
it will be synced to other repositories.  Then, when they run manage.py syncdb,
they will get the latest database content.

If your changes are made to the articles, you can use the following command:
python manage.py syncdb
python manage.py dumpdata --indent=4 contents > contents/fixtures/initial_data.json

Then you should commit and push the changes to the remote repository.
